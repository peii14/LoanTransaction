function recommend(score, recommenderAddress) {
    if (recomenderAddress != borrower) {
        print "you can not recommend your own project"
        return
    }
    
    if( score > minimumRecemmendVallue && score <= 100) 
        continue;
    else 
        return;
    if(!recommenders(recommenderAddress)){
        print "you have already recommended"
        return
    }
    if( moneyValue >= collateral){
         extraMoney = moneyValue - collateral
         if( collateral == moneyValue - extraMoney) 
            continue
         else 
            return
         if(extraMoney <= moneyValue) 
            continue
         else 
            return
         if (extraMoney > 0) {
            // return extra money to the sender
            refundExtraMoney()
        }
     }else{
        collateral = collateral - (moneyValue - extraMoney);
     }

    recommendedAmount = moneyValue - extraMoney;
    (weights, scores) = getRecomendationWeightAndScore()
    updateSocialRecomendation()
    isNew = false;
    //  
    Recommended(recommenderAddress, recommendedAmount);
    if (collateral == 0){
        updateInvestmentState()
    }
}

function Lend(address investorAddress){
    if(investorAddress != borrower){
        print "you can not invest in your own project"
        return
    }
    if(moneyValue > requestAmount){
        extraMoney = userBalance - requestAmount
        if(requestAmount == userBalance - extraMoney){
            continue
        }else return

        if(extraMoney <= moneyValue){
            continue
        }else return

        if (extraMoney > 0) {
            refundExtraMoney()
        }
    }
    totalInvestedAmount = totalInvestedAmount + moneyValue - extraMoney
    investedAmounts[investorAddress] = moneyValue - extraMoney);

    Invested(investorAddress,moneyValue - extraMoney);

    if (collateral == 0 && totalInvestedAmount == requestedAmount)
        state = ableToWithdraw();
}

function repay(){
    if(repaidAmount < returnAmount) continue
    else return

    if(MoneyValue >= repaymentInstallment){
        continue
    }else{
        return
    } 
    lastRepaymentDate = timestamp;
    repaidAmount = repaidAmount + (moneyValue - extraMoney);

    createBorrowerLog()
    if(repaidAmount >= returnAmount){
            // once the loan is finished, investors can ask for interest
            state = State.interestReturns;
            LoanStateChanged(state);

            // increase user's TScore after a successful loan project
            if (borowerSocialScore- successfulLoanScoreIncrease <= 100){
                updateBorrowerSocialScore()+ successfulLoanScoreIncrease;
            }
            else{
                setBorrowerSocialScore(100)
            }
    }
}

function claimWithInterest() {
    checkFraud();

    if(lender == True){
        // Calculate the interest amount to return to the lender
        // multiply the amount by the interest rate
        returnInterestAmount += (((10 ** interest * (100 - recommendersInterestRate)*1e18) / 10000)*investedAmounts) + investedAmounts
    }
    if (recomender == True) {
         // Calculate the interest amount to return to the recommender
        if(state != State.fraud){
            recommendedAmount = recommendedAmounts[senderAmount]
        }else{
            recomendedAmount = ((10**(totalRecommendedAmount - repaidAmount)) / totalRecommendedAmount) * recommendedAmounts;
        }
        // multiply the amount by the interest rate
        returnInterestAmount += ((10 ** interest*recommendersInterestRate*1e18 / 10000) * recommendedAmount) +recommendedAmount
        
    }
    if (returnInterestAmount > contractBalance)
        returnInterestAmount = contractBalance;

    if(contractBalance >= returnInterestAmount){
        continue
    }else{
        return
    }

    // Transfer the return amount with interest to the lender.
    payable(Tosender).transfer(returnInterestAmount);

    // Log the transfer to lender.
    createLenderLog();

    // Check if the contract balance is drawned.
    if(contractBalance == 0){
        destruct()
    }
}
function applyForLoan(){
    if (user != address(0)) {
        // The user not fraudulent
        if(userFraudStatus == false){
            continue
        }else{
            return
        }
        
        if (usersActiveLoan() != address(0) && usersActiveLoan() == isExpiredAndNotFunded()) {         
            destructActiveLoan()
        } else {
            // The user must not have any loan in progress or its loan is finished OR check if contract is at interest returns stage
            if(userActiveLoan() == address(0) || userActiveLoan() == LoanStateInteresReturns ){
                continue
            }else{
                return
            }
        }
    } else {
        addNewUser()
    }

    users.startNewCycle();
    loanAddress = LoanFactory.createLoan()

    usersSetActiveLoan(loanAddress);
}

function updateSocialRecomendationScore(){

    for (i = 0; i < weights.length; i++) {
        weightedScore = (weights[i]* scores[i])+ weightedScore;
    }

    if (loan.isNew() == true) {
        // add a previous TScore
        socialScore = ((10 ** loan.previousTScoreWeight()*1e18}) * userSocialRecommendationScore()) + socialScore;
        // add a new recommender's voted TScore
        socialScore = (((10 ** (100 - loan.previousTScoreWeight())*1e18) * weightedScore) + socialScore);
        socialScore = socialScore / 100;
    } else {
        socialScore = weightedScore;
    }

    user.setSocialRecommendationScore(socialScore);
    return user.getTScore();
}
function getRecomenderWeightAndValue(){
    for (i = 0; i < recommendersCount; i++) {
        recommender = recommenderAddr[i];
        if (recommenders[recommender]) {
            ExponentialNoError.Exp memory recommendedAmount = 10 ** recommendedAmounts[recommender];
            weights[i] = recommendedAmount / 10 ** totalRecommendedAmount;
            scores[i] = recommendedScore[recommender];
        }
    }
    return (weights, scores);
}

